version: "3"

vars:
  FUNCNAME: hntop-rss
  BUILDDIR: build
  COVERAGE_DIR: coverage
  BINARY: "{{.BUILDDIR}}/{{.FUNCNAME}}"

dotenv:
  - .env
  - "{{.ENV}}/.env."
  - "{{.HOME}}/.env"

tasks:
  default:
    desc: Default task, runs build
    cmds:
      - task: build

  build:
    desc: Build the Go application
    deps:
      - test
      - lint
      - validate-config
      - clean
    cmds:
      - mkdir -p {{.BUILDDIR}}
      - >
        go build 
        -ldflags="-X main.Version={{.VERSION}} -w -s" 
        -o {{.BINARY}}
    generates:
      - "{{.BINARY}}"
    vars:
      VERSION:
        sh: |
          if [ -n "${VERSION}" ]; then
            echo "${VERSION}"
          else
            echo "dev-$(git rev-parse --short HEAD)"
          fi

  build-linux-amd64:
    desc: Cross-compile the Go application for Linux AMD64
    deps:
      - test
      - lint
      - validate-config
      - clean
    cmds:
      - mkdir -p {{.BUILDDIR}}
      - >
        GOOS=linux GOARCH=amd64 go build 
        -ldflags="-X main.Version={{.VERSION}} -w -s" 
        -o {{.BUILDDIR}}/{{.FUNCNAME}}-linux-amd64
    generates:
      - "{{.BUILDDIR}}/{{.FUNCNAME}}-linux-amd64"
    vars:
      VERSION:
        sh: |
          if [ -n "${VERSION}" ]; then
            echo "${VERSION}"
          else
            echo "dev-$(git rev-parse --short HEAD)"
          fi

  build-linux:
    desc: Alias for build-linux-amd64
    cmds:
      - task: build-linux-amd64

  build-darwin-amd64:
    desc: Cross-compile the Go application for macOS Intel
    deps:
      - clean
    cmds:
      - mkdir -p {{.BUILDDIR}}
      - >
        GOOS=darwin GOARCH=amd64 go build 
        -ldflags="-X main.Version={{.VERSION}} -w -s" 
        -o {{.BUILDDIR}}/{{.FUNCNAME}}-darwin-amd64
    generates:
      - "{{.BUILDDIR}}/{{.FUNCNAME}}-darwin-amd64"
    vars:
      VERSION:
        sh: |
          if [ -n "${VERSION}" ]; then
            echo "${VERSION}"
          else
            echo "dev-$(git rev-parse --short HEAD)"
          fi

  build-darwin-arm64:
    desc: Cross-compile the Go application for macOS Apple Silicon
    deps:
      - clean
    cmds:
      - mkdir -p {{.BUILDDIR}}
      - >
        GOOS=darwin GOARCH=arm64 go build 
        -ldflags="-X main.Version={{.VERSION}} -w -s" 
        -o {{.BUILDDIR}}/{{.FUNCNAME}}-darwin-arm64
    generates:
      - "{{.BUILDDIR}}/{{.FUNCNAME}}-darwin-arm64"
    vars:
      VERSION:
        sh: |
          if [ -n "${VERSION}" ]; then
            echo "${VERSION}"
          else
            echo "dev-$(git rev-parse --short HEAD)"
          fi

  build-windows:
    desc: Cross-compile the Go application for Windows AMD64
    deps:
      - clean
    cmds:
      - mkdir -p {{.BUILDDIR}}
      - >
        GOOS=windows GOARCH=amd64 go build 
        -ldflags="-X main.Version={{.VERSION}} -w -s" 
        -o {{.BUILDDIR}}/{{.FUNCNAME}}-windows-amd64.exe
    generates:
      - "{{.BUILDDIR}}/{{.FUNCNAME}}-windows-amd64.exe"
    vars:
      VERSION:
        sh: |
          if [ -n "${VERSION}" ]; then
            echo "${VERSION}"
          else
            echo "dev-$(git rev-parse --short HEAD)"
          fi

  build-linux-amd64-ci:
    desc: Cross-compile for Linux AMD64 (CI - no test/lint deps)
    deps:
      - clean
    cmds:
      - mkdir -p {{.BUILDDIR}}
      - >
        GOOS=linux GOARCH=amd64 go build 
        -ldflags="-X main.Version={{.VERSION}} -w -s" 
        -o {{.BUILDDIR}}/{{.FUNCNAME}}-linux-amd64
    generates:
      - "{{.BUILDDIR}}/{{.FUNCNAME}}-linux-amd64"
    vars:
      VERSION:
        sh: |
          if [ -n "${VERSION}" ]; then
            echo "${VERSION}"
          else
            echo "dev-$(git rev-parse --short HEAD)"
          fi

  build-darwin-amd64-ci:
    desc: Cross-compile for macOS Intel (CI - no test/lint deps)
    deps:
      - clean
    cmds:
      - mkdir -p {{.BUILDDIR}}
      - >
        GOOS=darwin GOARCH=amd64 go build 
        -ldflags="-X main.Version={{.VERSION}} -w -s" 
        -o {{.BUILDDIR}}/{{.FUNCNAME}}-darwin-amd64
    generates:
      - "{{.BUILDDIR}}/{{.FUNCNAME}}-darwin-amd64"
    vars:
      VERSION:
        sh: |
          if [ -n "${VERSION}" ]; then
            echo "${VERSION}"
          else
            echo "dev-$(git rev-parse --short HEAD)"
          fi

  build-darwin-arm64-ci:
    desc: Cross-compile for macOS Apple Silicon (CI - no test/lint deps)
    deps:
      - clean
    cmds:
      - mkdir -p {{.BUILDDIR}}
      - >
        GOOS=darwin GOARCH=arm64 go build 
        -ldflags="-X main.Version={{.VERSION}} -w -s" 
        -o {{.BUILDDIR}}/{{.FUNCNAME}}-darwin-arm64
    generates:
      - "{{.BUILDDIR}}/{{.FUNCNAME}}-darwin-arm64"
    vars:
      VERSION:
        sh: |
          if [ -n "${VERSION}" ]; then
            echo "${VERSION}"
          else
            echo "dev-$(git rev-parse --short HEAD)"
          fi

  build-windows-ci:
    desc: Cross-compile for Windows AMD64 (CI - no test/lint deps)
    deps:
      - clean
    cmds:
      - mkdir -p {{.BUILDDIR}}
      - >
        GOOS=windows GOARCH=amd64 go build 
        -ldflags="-X main.Version={{.VERSION}} -w -s" 
        -o {{.BUILDDIR}}/{{.FUNCNAME}}-windows-amd64.exe
    generates:
      - "{{.BUILDDIR}}/{{.FUNCNAME}}-windows-amd64.exe"
    vars:
      VERSION:
        sh: |
          if [ -n "${VERSION}" ]; then
            echo "${VERSION}"
          else
            echo "dev-$(git rev-parse --short HEAD)"
          fi

  build-all-platforms:
    desc: Build for all supported platforms
    deps:
      - test
      - lint
      - validate-config
    cmds:
      - task: build-linux-amd64
      - task: build-darwin-amd64
      - task: build-darwin-arm64
      - task: build-windows

  test:
    desc: Run Go tests with coverage
    cmds:
      - mkdir -p {{.COVERAGE_DIR}}
      - go test -v -race -coverprofile={{.COVERAGE_DIR}}/coverage.out ./...
      - go tool cover -html={{.COVERAGE_DIR}}/coverage.out -o {{.COVERAGE_DIR}}/coverage.html
    sources:
      - ./**/*.go
    generates:
      - "{{.COVERAGE_DIR}}/coverage.out"
      - "{{.COVERAGE_DIR}}/coverage.html"

  lint:
    desc: Run Go linters
    cmds:
      - golangci-lint run ./...
    sources:
      - ./**/*.go
    silent: true

  validate-config:
    desc: Validate configuration files
    cmds:
      - |
        echo "🔍 Validating configs/domains.json..."
        if ! python3 -m json.tool configs/domains.json > /dev/null 2>&1; then
          echo "❌ configs/domains.json is not valid JSON"
          exit 1
        fi
        echo "✅ configs/domains.json is valid"
    sources:
      - configs/domains.json
    silent: true

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf {{.BUILDDIR}} {{.COVERAGE_DIR}}

  build-ci:
    desc: Build the Go application for CI (tests/lint/validation run separately)
    deps:
      - clean
    cmds:
      - mkdir -p {{.BUILDDIR}}
      - >
        go build 
        -ldflags="-X main.Version={{.VERSION}} -w -s" 
        -o {{.BINARY}}
    generates:
      - "{{.BINARY}}"
    vars:
      VERSION:
        sh: |
          if [ -n "${VERSION}" ]; then
            echo "${VERSION}"
          else
            echo "dev-$(git rev-parse --short HEAD)"
          fi

  test-ci:
    desc: Run Go tests for CI with coverage
    cmds:
      - mkdir -p {{.COVERAGE_DIR}}
      - go test -tags=ci -cover -v ./...
    sources:
      - ./**/*.go
    generates:
      - "{{.COVERAGE_DIR}}/coverage.out"

  upgrade-deps:
    desc: Upgrade all dependencies to their latest versions
    silent: true
    cmds:
      - go get -u ./...
      - go mod tidy
      - echo "✅ Dependencies upgraded successfully"
    sources:
      - go.mod
      - go.sum
    generates:
      - go.mod
      - go.sum

  release-check:
    desc: Check GoReleaser configuration
    cmds:
      - goreleaser check
    sources:
      - .goreleaser.yml

  release-snapshot:
    desc: Build a snapshot release locally (for testing)
    deps:
      - test
      - lint
      - validate-config
    cmds:
      - goreleaser release --snapshot --clean
    sources:
      - ./**/*.go
      - .goreleaser.yml
    generates:
      - dist/**/*

  release-dry-run:
    desc: Test release process without publishing
    deps:
      - test
      - lint
      - validate-config
    cmds:
      - goreleaser release --skip=publish --clean
    sources:
      - ./**/*.go
      - .goreleaser.yml
