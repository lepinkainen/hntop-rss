version: "3"

vars:
  FUNCNAME: hntop-rss
  BUILDDIR: build
  COVERAGE_DIR: coverage
  BINARY: "{{.BUILDDIR}}/{{.FUNCNAME}}"

dotenv:
  - .env
  - "{{.ENV}}/.env."
  - "{{.HOME}}/.env"

tasks:
  default:
    desc: Default task, runs build
    cmds:
      - task: build

  build:
    desc: Build the Go application
    deps:
      - test
      - lint
      - clean
    cmds:
      - mkdir -p {{.BUILDDIR}}
      - >
        go build 
        -ldflags="-X main.Version={{.GIT_COMMIT}} -w -s" 
        -o {{.BINARY}}
    generates:
      - "{{.BINARY}}"
    vars:
      GIT_COMMIT:
        sh: git rev-parse --short HEAD

  build-linux:
    desc: Cross-compile the Go application for Linux AMD64
    deps:
      - test
      - lint
      - clean
    cmds:
      - mkdir -p {{.BUILDDIR}}
      - >
        GOOS=linux GOARCH=amd64 go build 
        -ldflags="-X main.Version={{.GIT_COMMIT}} -w -s" 
        -o {{.BUILDDIR}}/{{.FUNCNAME}}-linux-amd64
    generates:
      - "{{.BUILDDIR}}/{{.FUNCNAME}}-linux-amd64"
    vars:
      GIT_COMMIT:
        sh: git rev-parse --short HEAD

  test:
    desc: Run Go tests with coverage
    cmds:
      - mkdir -p {{.COVERAGE_DIR}}
      - go test -v -race -coverprofile={{.COVERAGE_DIR}}/coverage.out ./...
      - go tool cover -html={{.COVERAGE_DIR}}/coverage.out -o {{.COVERAGE_DIR}}/coverage.html
    sources:
      - ./**/*.go
    generates:
      - "{{.COVERAGE_DIR}}/coverage.out"
      - "{{.COVERAGE_DIR}}/coverage.html"

  lint:
    desc: Run Go linters
    cmds:
      - golangci-lint run ./...
    sources:
      - ./**/*.go
    silent: true

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf {{.BUILDDIR}} {{.COVERAGE_DIR}}

  build-ci:
    desc: Build the Go application for CI
    deps:
      - test-ci
      - lint
      - clean
    cmds:
      - mkdir -p {{.BUILDDIR}}
      - >
        go build 
        -ldflags="-X main.Version={{.GIT_COMMIT}} -w -s" 
        -o {{.BINARY}}
    generates:
      - "{{.BINARY}}"
    vars:
      GIT_COMMIT:
        sh: git rev-parse --short HEAD

  test-ci:
    desc: Run Go tests for CI with coverage
    cmds:
      - mkdir -p {{.COVERAGE_DIR}}
      - go test -tags=ci -cover -v ./...
    sources:
      - ./**/*.go
    generates:
      - "{{.COVERAGE_DIR}}/coverage.out"

  upgrade-deps:
    desc: Upgrade all dependencies to their latest versions
    silent: true
    cmds:
      - go get -u ./...
      - go mod tidy
      - echo "âœ… Dependencies upgraded successfully"
    sources:
      - go.mod
      - go.sum
    generates:
      - go.mod
      - go.sum
